Що таке Angular і чим він кращий за jQuery?
Angular — JavaScript фреймворк для фронтенд розробників від Google. Більшість з вас, мабуть, вже знають різницю між фреймворком та бібліотекою.
Трохи про версії
Перша версія Angular, яку сьогодні заведено називати Angular JS, була багато у чому не оптимальною. Однак величезна кількість проектів і досі використовують цю версію. Згодом команда розробників фактично з нуля переписала проект. Нова версія отримала назву Angular 2 чи просто Angular без індексу. Вона кардинально відрізнялась від першої, справляючи враження зовсім іншого фреймворку. Проекти не могли з легкістю мігрувати зі старої версії на нову, тому це зумовило певні проблеми. Необхідно було переписати усе повторно.
Angular став концептуально простішим, більш технологічним та зрозумілішим. Після Angular 2 вийшли версії 4, 5, а зовсім нещодавно — 7 версія. Варто помітити, що ніяких кардинальних змін з виходом версії 2 більше не відбувається. Усі версії, з другої до сьомої, повністю сумісні. Тож тепер нема потреби освоювати усе заново.
У статті описано алгоритм створення застосунку з використанням Angular 6.В основному, Angular призначений для створення комплексних enterprise-застосунків, а саме односторінкових веб застосунків (Single Page Application).
Всередині фреймворку реалізовано:
модульність;
анімації;
маршрутизація;
робота з бекендом;
зберігання/обробка/відображення даних;
робота з формами та шаблонами тощо.
У чому сенс SPA та його застосування
Single Page Application (SPA чи односторінковий застосунок) реалізує зручні для користувача сервіси, що наповнені інтерактивом. Найпростішим прикладом є Gmail.
SPA — веб-застосунок, розташований на одній фізичній HTML сторінці. Така сторінка одноразово завантажує усі необхідні ресурси (JavaScript, CSS, images тощо.) і більше не перезавантажується. Переходи за посиланнями не призводять до реального перезавантаження сторінки, а її вміст змінюється «на льоту», тобто динамічно. За необхідністю виконується запит на сервер для отримання даних, і після їх отримання формується контент «нової» сторінки. Кожна окрема віртуальна сторінка прописується у маршрутизаторі (router). У нашому застосунку існує два маршрути: головна та чат.
Angular — один з фреймворків, що дозволяє реалізовувати описані Single Page Application.
Перш за все, варто зазначити, що Angular застосунки пишуться на TypeScript, а не на чистому JavaScript. Версія синтаксису для JavaScript не отримала широкого розповсюдження, тому на даний момент у документації усі синтаксичні конструкції описані з використанням синтаксису TypeScript.
Коротко оглянемо основні пункти. Архітектура Angular складається з:
Module;
Component;
Template;
Service;
Router;
Pipe;
Directives.
Модулі (Module) — структурні одиниці застосунку, які інкапсулюють певну логіку. В Angular це структури, які зберігають певні компоненти, директиви та сервіси, об’єднані певною логікою. Прикладом може слугувати профіль користувача, модуль для написання листа, огляд списку листів тощо.
Компоненти (Component) — typescript клас, який зберігає дані та логіку відображення цих даних у шаблоні (представленні). Шаблон тісно пов’язаний з компонентом. Дані з компонента можна з легкістю відображати у шаблоні, використовуючи спеціальний синтаксис. Компонент також може «знімати» дані з шаблона та отримувати їх безпосередньо у скрипті.
Шаблон (Template) — фрагмент html-коду з додаванням спеціального синтаксису. Він дозволяє впроваджувати в шаблон дані з компонента без використання innerHTML та подібних методів. Шаблон прописується у компоненті та є частиною його конфігурації.
Сервіс (Service) в Angular являє собою typescript класи, які виконують задачі, пов’язані з отриманням, зберіганням та обробкою даних. Наприклад, логування, перетворення даних для подальшої передачі у компонент, звернення до backend та ін. На відміну від компонентів та директив сервіси не працюють з представленнями (шаблонами) напряму.
Задачі сервісів:
Надання даних застосунку. Сервіс сам може зберігати дані у пам’яті або, з метою отримання даних, звертатися до якогось джерела даних, наприклад, до сервера;
Сервіс може організувати канал взаємодії між окремими компонентами застосунку;
Сервіс може інкапсулювати бізнес-логіку, різноманітні обчислювальні задачі, задачі з логування, які краще виносити поза компоненти. Таким чином, код компонентів буде зосереджений, безпосередньо, на роботі з представленням. До того ж, можемо розв’язати проблему повторення коду, якщо нам знадобиться виконати одну й ту саму задачу у різних компонентах і класах.
Роутер (Router)— маршрутизатор, який призначений для переходу між екранами з метою відображення різного контенту.
Іншими словами, коли в адресному рядку браузера у вас змінюється фрагмент URL, маршрутизатор відстежує ці зміни та завантажує ту або іншу частину застосунку.
Завершимо теоретичну частину та перейдемо до написання коду.
Директиви та Пайпи — більш специфічні конструкції, які простіше продемонструвати у коді, ніж описати словами.
Ознайомитись повністю з архітектурою Angular у рамках однієї статті неможливо. Аби дізнатися більше, ви можете переглянути повну версію вебінару у нас на сторінці чи зареєструватися на повний курс «Angular трансформація».
Фрагменти коду можна знайти тут.
Використання Angular CLI для запуску нового проекту-заготовки
Перейдемо до першої частини інструкції. Для того, щоб почати, створимо теку project (або будь-яка інша назва). У ній і почнемо роботу над проектом.
По-перше, необхідно за допомогою консолі виконати у створеній теці команду npm install –g @angular/cli.
Angular CLI (Common Line Interface) — спеціальна утиліта, що дозволяє швидко та легко створювати структури для нового проекту Angular. Більше інформації щодо Angular CLI можна знайти на офіційному ресурсі.
Далі, необхідно створити новий проект за допомогою наступної команди в консолі: ng new jsexpert-chat-bot –routing.
Розшифруємо команду. Ng — скорочена назва самого Angular CLI, new — створення нового проекту, jsexpert-chat-bot — назва проекту (можна змінити на будь-яку іншу), –routing — спеціальний прапор, що дозволяє одразу створити модуль роутингу (маршрутизатора). Таким чином, немає потреби створювати роутинг окремо, до того ж у нас одразу буде той фрагмент коду, який дозволить додати навігацію та переходити між різними станами.Можливо, вас цікавить які саме ресурси реалізовано на Angular? На сайті «Made with Angular» знайдете список, в якому вказано сайти, створені за допомогою різних версій фреймворку.Бібліотека зазвичай спеціалізується на вузькій чи конкретній задачі. jQuery наприклад, спеціалізується на роботі з DOM-деревом, створює запити на backend тощо. Але бібліотека не передбачає створення архітектурної системи в цілому. Фреймворк, натомість, призначений для того, щоб побудувати архітектуру усього застосунку.